// <auto-generated />
using System;
using DoctorWho.Db.Authentication;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DoctorWho.Db.Migrations.AuthDb
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20210928145607_new_approver_seeded_account")]
    partial class new_approver_seeded_account
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "edff43f4-659a-4058-b510-6c08f515725c",
                            ConcurrencyStamp = "8037ec40-efad-4dcd-a07d-a7042756a4e5",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "977ef184-f55d-4a49-bf72-8dba4f5ee567",
                            ConcurrencyStamp = "22ba96a0-c7a0-4958-a558-1333fd88524f",
                            Name = "Auditor",
                            NormalizedName = "AUDITOR"
                        },
                        new
                        {
                            Id = "04b3983b-00da-40d6-bfe3-77614e9d591f",
                            ConcurrencyStamp = "6295d494-4d76-447b-894c-1329170d6345",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0d62a8f6-910f-4862-ac29-6c0a8f4d73dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a010baf-3684-40f4-91b3-ba0e7cadce09",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQylZgPd1/mEWc/GoK/lbd0fseoe6Gnv/UAANH7KWYZVclEmoc7wVvnNoH3vz4nfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f24ea53-09fa-4072-866e-205f5f33148e",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "aad26a52-c9e0-49ca-8882-38fc1ba6d071",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d629f86c-dd83-451d-89ac-a25c1816aeef",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TESTING-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBXGiHoqYNvDRUBxZOh93X5eGmJZNXcIzHOuDsjevxNZcfKWi/w4e9LAv4AqJyTzrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6039f7ad-c9b9-4bc2-8e4b-0da9d45b0a98",
                            TwoFactorEnabled = false,
                            UserName = "testing-user"
                        },
                        new
                        {
                            Id = "5e0d34c0-eefa-4f71-9402-42f44604fd6e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2a204c6-6e8c-4b30-9f2f-c1d4343e4a80",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "REDACTED-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAECtDNastsmTgivqdKgATfyScGPx/FyGHiOdMKC+idp9GI6TBtSx+02koMGr42dJVxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ad50586-4c9f-42a1-9bc3-057d0821673d",
                            TwoFactorEnabled = false,
                            UserName = "redacted-user"
                        },
                        new
                        {
                            Id = "bad9dd70-743a-4a9e-a7c5-0f8a2d8d5f50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c02c3aba-81c7-4c7f-b3c4-4f541928a72b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PARTIAL-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJl09Xq+K1qo31+SBm7KKl1DuNeCn3S7wlSzEpW6v7/372TOKkr4Av6ZpUwLkUKhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "654823d2-ea7d-4479-b577-655c67f1a857",
                            TwoFactorEnabled = false,
                            UserName = "partial-user"
                        },
                        new
                        {
                            Id = "a4df0e81-7af1-49ea-83de-ea2f0de08eec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acf72589-80ec-4188-88a5-c91b01279c94",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MODIFY-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEIPaFlAjMTEQWHZg5LAqzY99ovpLZZP2qOTQxt5yFC8fdddKaoaYiMi0jiBVdeBKXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "055d76d9-75c9-40d4-83fd-0d52a6aaa219",
                            TwoFactorEnabled = false,
                            UserName = "modify-user"
                        },
                        new
                        {
                            Id = "ca68d77b-1270-4f2e-9f87-f6aee962a13e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2746ad6-ba13-4290-a353-b500bf6d2cbc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "APPROVING-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEO/Ez67AdXKC5qj2y62ExPcea3UzS1I0w9Gsm4CmArInFtIuxXFPZvJcMBdYlAoSJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90368f60-2538-4529-8ff2-b863b0f8bfe3",
                            TwoFactorEnabled = false,
                            UserName = "approving-user"
                        },
                        new
                        {
                            Id = "0139cc5b-47f7-4564-a0ae-eb281e3005e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "742855ac-10cf-41b9-99ba-3a8879c4a08d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "APPROVED-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJGf0wh+8URFbVMIXefcb25et9DMStP3Hfw8PIbULLAe+rNSHB/bqze9eT2QqnrvJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a3b3d0c-aa22-4a22-a1d1-542579f99884",
                            TwoFactorEnabled = false,
                            UserName = "approved-user"
                        },
                        new
                        {
                            Id = "d232752a-f83d-42b6-b28f-2960600350ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09128a04-b17b-41c5-bfde-4d50183019a1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NO-ACCESS-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEKi8v4ftGqojVz9tUKOvG7THNYtsAU57qeulQaDiB+2pHC0tgJ53ZXaVNr95fcjmMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6b28b7d-93cc-4e93-a99b-7f2bd48b25f9",
                            TwoFactorEnabled = false,
                            UserName = "no-access-user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "0d62a8f6-910f-4862-ac29-6c0a8f4d73dc",
                            RoleId = "04b3983b-00da-40d6-bfe3-77614e9d591f"
                        },
                        new
                        {
                            UserId = "aad26a52-c9e0-49ca-8882-38fc1ba6d071",
                            RoleId = "edff43f4-659a-4058-b510-6c08f515725c"
                        },
                        new
                        {
                            UserId = "5e0d34c0-eefa-4f71-9402-42f44604fd6e",
                            RoleId = "edff43f4-659a-4058-b510-6c08f515725c"
                        },
                        new
                        {
                            UserId = "bad9dd70-743a-4a9e-a7c5-0f8a2d8d5f50",
                            RoleId = "edff43f4-659a-4058-b510-6c08f515725c"
                        },
                        new
                        {
                            UserId = "a4df0e81-7af1-49ea-83de-ea2f0de08eec",
                            RoleId = "edff43f4-659a-4058-b510-6c08f515725c"
                        },
                        new
                        {
                            UserId = "0139cc5b-47f7-4564-a0ae-eb281e3005e5",
                            RoleId = "edff43f4-659a-4058-b510-6c08f515725c"
                        },
                        new
                        {
                            UserId = "d232752a-f83d-42b6-b28f-2960600350ba",
                            RoleId = "edff43f4-659a-4058-b510-6c08f515725c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
