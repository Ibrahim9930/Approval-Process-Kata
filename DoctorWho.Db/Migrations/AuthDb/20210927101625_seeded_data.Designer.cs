// <auto-generated />
using System;
using DoctorWho.Db.Authentication;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DoctorWho.Db.Migrations.AuthDb
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20210927101625_seeded_data")]
    partial class seeded_data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "6ebb48da-c685-4021-a02d-7e126616a7b5",
                            ConcurrencyStamp = "fe964f6a-0dba-4c42-823e-2671f98c5044",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "f0b495e7-68e7-4b9b-bd53-81316f22d5c6",
                            ConcurrencyStamp = "05fdac14-f1c3-4498-a22f-46d2a108ad2b",
                            Name = "Approver",
                            NormalizedName = "APPROVER"
                        },
                        new
                        {
                            Id = "43de098c-8ca7-42ae-8d78-ed6d04b645f3",
                            ConcurrencyStamp = "7bb5a863-8f5d-461b-a71c-78d25d974b34",
                            Name = "Auditor",
                            NormalizedName = "AUDITOR"
                        },
                        new
                        {
                            Id = "5c362182-4c69-441a-b5dc-3f3d1951e7bf",
                            ConcurrencyStamp = "a272b761-d8d6-4560-be7e-875480cf6685",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3293219c-2e66-4bb6-961a-4cef432ef1f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a45c5347-7d4e-47d8-9c6e-c61220137525",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENn2S779wkCgOf0AEHt2mcb4bXeh7f9EjplYcl4zVz3FGsEaYRAVwKT9lcVycBTW4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1ff3be5-4a95-46d2-aaba-041f46a6f49a",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "aa3bf53f-0483-4c36-b25e-a5e1c128382f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a39ddf3-26bd-44e4-823f-9d53d5add85b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TESTING-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEoB2a8jK/u2OLvCVDIogRehj3b7cI5Lhti3HmMs+F0kF5c000Maq/fEZHuYgPp16Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d98eb0a1-c515-48f1-bc9c-d02fe2a45e08",
                            TwoFactorEnabled = false,
                            UserName = "testing-user"
                        },
                        new
                        {
                            Id = "4e4ff383-a8a3-4cfc-ae71-aca8724ef2e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "644a3c71-1020-4b97-9bf5-91c072f8fadc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "REDACTED-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBNRMbZa0mawrZfJ3piRj6nK644K5YGE48szaoDhrqFme0fuLrRFVwJxkWZrYiDrQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eaf6497e-52fa-4aa1-b9c1-d42ab885bdc9",
                            TwoFactorEnabled = false,
                            UserName = "redacted-user"
                        },
                        new
                        {
                            Id = "49ec4425-d734-439f-9126-6ac343161306",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66556573-9ad4-4242-b961-5b6f79e37d9f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PARTIAL-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDjb90TvKs7YolDb1oNTEiRNFcv3sYyagm1RDHbDAmBfKuFq09pO/U9WLIiWKpZwew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b1d2a75-e72c-4db8-bfca-239f563e8f87",
                            TwoFactorEnabled = false,
                            UserName = "partial-user"
                        },
                        new
                        {
                            Id = "7765e6a1-b018-4f50-922f-146d324f7e57",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a43066b4-2536-42fa-981a-9c2069f3a3ea",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MODIFY-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEHr5v2BTQx4iO5CHA3ISllFdQz32mXhhxT5Qaa/RECCJKZoFDZ689XvCyemoUdoe0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0011d0d4-e205-4f88-bfd3-6737c5587685",
                            TwoFactorEnabled = false,
                            UserName = "modify-user"
                        },
                        new
                        {
                            Id = "9f1293c7-8e8e-41ac-877e-e21b37eceec6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af7db58e-eda0-4a9f-bdbd-962a3f657be3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NO-ACCESS-USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ8eCKM5QGh4s0adQmJP20+SU2KPl/JlXO//CTtWPirzvtEZL1z/Sfzb62rIgkflRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e44023d-62b8-434b-afa7-116e327e86a7",
                            TwoFactorEnabled = false,
                            UserName = "no-access-user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3293219c-2e66-4bb6-961a-4cef432ef1f5",
                            RoleId = "5c362182-4c69-441a-b5dc-3f3d1951e7bf"
                        },
                        new
                        {
                            UserId = "aa3bf53f-0483-4c36-b25e-a5e1c128382f",
                            RoleId = "6ebb48da-c685-4021-a02d-7e126616a7b5"
                        },
                        new
                        {
                            UserId = "4e4ff383-a8a3-4cfc-ae71-aca8724ef2e2",
                            RoleId = "6ebb48da-c685-4021-a02d-7e126616a7b5"
                        },
                        new
                        {
                            UserId = "49ec4425-d734-439f-9126-6ac343161306",
                            RoleId = "6ebb48da-c685-4021-a02d-7e126616a7b5"
                        },
                        new
                        {
                            UserId = "7765e6a1-b018-4f50-922f-146d324f7e57",
                            RoleId = "6ebb48da-c685-4021-a02d-7e126616a7b5"
                        },
                        new
                        {
                            UserId = "9f1293c7-8e8e-41ac-877e-e21b37eceec6",
                            RoleId = "6ebb48da-c685-4021-a02d-7e126616a7b5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
